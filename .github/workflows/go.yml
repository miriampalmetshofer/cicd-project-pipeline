# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    name: Build, Test, and Run Docker Image
    runs-on: ubuntu-latest

    env:
      APP_DB_USERNAME: postgres
      APP_DB_PASSWORD: password
      APP_DB_NAME: postgres

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.24

      - name: Start PostgreSQL container
        run: |
          docker run --name postgres \
            -p 5432:5432 \
            -e POSTGRES_USER=${APP_DB_USERNAME} \
            -e POSTGRES_PASSWORD=${APP_DB_PASSWORD} \
            -e POSTGRES_DB=${APP_DB_NAME} \
            -d postgres
        # Wait for PostgreSQL to be ready
      - name: Wait for DB to be ready
        run: |
          until docker exec postgres pg_isready -U $APP_DB_USERNAME; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Build Go App
        run: go build -v ./...

      - name: Run Go Tests
        run: go test -v ./...

      - name: Build Docker Image
        run: docker build -t cicd-project-pipeline .

      - name: Run App Container
        run: |
          docker run --name app \
            --link postgres \
            -p 8010:8010 \
            -d cicd-project-pipeline

      - name: Test Health Endpoint
        run: |
          sleep 3
          curl --fail http://localhost:8010/health
  

  sonarCloud:
    needs: build
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: sonarsource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


